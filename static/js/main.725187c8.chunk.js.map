{"version":3,"sources":["global-styles.ts","context/trains.context.tsx","providers.tsx","components/button/styles.ts","components/button/index.tsx","components/TextInput/styles.ts","components/TextInput/index.tsx","components/typography/styles.ts","components/typography/index.tsx","components/TextArea/styles.ts","components/TextArea/index.tsx","sections/addCities.section.tsx","sections/calculateDistances.section.tsx","components/routeListItem/index.tsx","components/cityListItem/index.tsx","sections/styles.ts","sections/seeCities.section.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","styled","div","StyledContainer","StyledFlexContainer","StyledFlexContainerNoBorder","StyledGridRow","section","StyledFlexGridRow","DEFAULT_TRAINS_CONTEXT_DATA","cities","addRoute","addMultipleRoutes","calculateCtoCTrips","calculateRouteDistance","trainsContext","createContext","Provider","TrainsProvider","children","useState","setCities","cToCStep","cityToCheck","stops_remaining","console","group","name","accumulatedDistance","routes","forEach","route","cityRoute","filter","city","to","log","distance","groupEnd","value","s","multipleRouteCommands","split","newCities","routeCommand","trimmedRouteCommand","trim","from","parseInt","length","existingCity","cityName","existingCities","checkIfCityExistsLocally","push","cityIndex","indexOf","newExistingRoutes","splice","table","routeLength","commandCities","alert","checkIfCityExists","existingRoute","cityString","citiesArray","totalDistance","routeIsValid","selectedCity","nextCity","selectedRoute","stops","clear","cityC","ditance","useTrains","context","useContext","Error","Providers","StyledButton","button","Button","label","onClick","disabled","TextInputContainer","StyledInput","input","InputLabel","TextInput","changeValue","type","changeChecked","checked","onChange","e","target","commonCSS","css","StyledH1","h1","StyledH2","h2","StyledH3","h3","StyledH4","h4","StyledH5","h5","StyledH6","h6","StyledP","p","Typography","text","TextAreaContainer","StyledTextArea","textarea","TextAreaLabel","TextArea","AddCitiesSection","setMultipleRouteCommands","setRouteCommand","setRouteLength","CalculateDistancesSection","setCityString","RouteListItem","toString","CityListItem","map","index","SeeCitiesContainer","SeeCitiesSection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.725187c8.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const App = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: row;\n  font-size: calc(10px + 1vmin);\n  color: white;\n`;\n\nexport const StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0.2em;\n  margin: 0.2em;\n  border: 2px solid gray;\n`;\nexport const StyledFlexContainer = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  padding: 0.2em;\n  margin: 0.2em;\n  border: 2px solid gray;\n`;\nexport const StyledFlexContainerNoBorder = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  padding: 0.2em;\n  margin: 0.2em;\n`;\n\nexport const StyledGridRow = styled.section`\n  display: flex;\n  width: auto;\n  align-items: center;\n`;\nexport const StyledFlexGridRow = styled.section`\n  display: flex;\n  flex: 1;\n  width: auto;\n  align-items: center;\n`;\n","import React, { createContext, useContext, useState } from \"react\";\n\nexport interface City {\n  name: string;\n  routes: Route[];\n}\n\nexport interface Route {\n  distance: number;\n  from: string;\n  to: string;\n}\n\nexport interface TrainsContextData {\n  cities: City[];\n  addRoute: (s: string, l: string) => void;\n  addMultipleRoutes: (mr: string) => void;\n  calculateRouteDistance: (c: string) => number;\n  calculateCtoCTrips: (stops: number) => void;\n}\n\nconst DEFAULT_TRAINS_CONTEXT_DATA: TrainsContextData = {\n  cities: [],\n  addRoute: () => null,\n  addMultipleRoutes: () => null,\n  calculateCtoCTrips: () => null,\n  calculateRouteDistance: () => 0,\n};\n\nconst trainsContext = createContext<TrainsContextData>(\n  DEFAULT_TRAINS_CONTEXT_DATA\n);\n\nconst { Provider } = trainsContext;\n\nexport const TrainsProvider: React.FC = ({ children }) => {\n  const [cities, setCities] = useState<City[]>([]);\n\n  const checkIfCityExists = (cityName: string): City | null => {\n    const city = cities.filter((city) => city.name === cityName);\n    if (city.length) {\n      return city[0];\n    }\n    return null;\n  };\n  const checkIfCityExistsLocally = (\n    cityName: string,\n    existingCities: City[]\n  ): City | null => {\n    const city = existingCities.filter((city) => city.name === cityName);\n    if (city.length) {\n      return city[0];\n    }\n    return null;\n  };\n\n  const addMultipleRoutes = (s: string) => {\n    const multipleRouteCommands = s.split(\",\");\n    const newCities = [...cities];\n    multipleRouteCommands.forEach((routeCommand) => {\n      const trimmedRouteCommand = routeCommand.trim().split(\"\");\n      const from = trimmedRouteCommand[0];\n      const to = trimmedRouteCommand[1];\n      const distance = parseInt(trimmedRouteCommand[2]);\n      console.group(routeCommand);\n      if (from === to || distance === 0 || trimmedRouteCommand.length > 3) {\n        console.log(\"Invalid Route\");\n        console.groupEnd();\n        return;\n      }\n\n      let existingCity = checkIfCityExistsLocally(from, newCities);\n      if (!existingCity) {\n        console.log(\n          from +\n            \" city doesnt exist, creating it and the route to:\" +\n            to +\n            \" with distance: \" +\n            distance\n        );\n        newCities.push({ name: from, routes: [{ from, to, distance }] });\n        console.groupEnd();\n        return;\n      }\n      console.log(from + \" City exists, continuing\");\n\n      const cityIndex = newCities.indexOf(existingCity);\n      console.log(from + \" cityIndex: \", cityIndex);\n      const existingRoute = existingCity.routes.filter((route) => {\n        return route.to === to;\n      });\n      if (existingRoute.length) {\n        console.log(\"Route already exists\");\n        console.groupEnd();\n        return;\n      }\n      console.log(from + \" Route to:\" + to + \" doesnt exist, creating\");\n      const newExistingRoutes = [...existingCity.routes];\n      newExistingRoutes.push({ from, to, distance });\n      console.log(from + \" newExistingRoutes: \", newExistingRoutes);\n      existingCity.routes = newExistingRoutes;\n      newCities.splice(cityIndex, 1, existingCity);\n      console.table(newCities);\n      console.groupEnd();\n    });\n    setCities(newCities);\n    // console.log({ currentCities, multipleRouteCommands });\n  };\n\n  const addRoute = (routeCommand: string, routeLength: string) => {\n    const commandCities = routeCommand.split(\"\");\n    const from = commandCities[0];\n    const to = commandCities[1];\n    const distance = parseInt(routeLength);\n    if (from === to || distance === 0 || commandCities.length > 2) {\n      alert(\"Invalid route\");\n      return;\n    }\n    let existingCity = checkIfCityExists(from);\n    if (!existingCity) {\n      const newCities: City[] = [...cities];\n      newCities.push({ name: from, routes: [{ from, to, distance }] });\n      setCities(newCities);\n      return;\n    }\n    const cityIndex = cities.indexOf(existingCity);\n    const existingRoute = existingCity.routes.filter((route) => {\n      return route.to === to;\n    });\n    console.log(\"existingRoute: \", existingRoute);\n    if (existingRoute.length) {\n      alert(\"Route already exists!\");\n      return;\n    }\n    const newExistingRoutes = [...existingCity.routes];\n    newExistingRoutes.push({ from, to, distance });\n    existingCity.routes = newExistingRoutes;\n    const newCities = [...cities];\n    newCities.splice(cityIndex, 1, existingCity);\n    setCities(newCities);\n  };\n\n  const calculateRouteDistance = (cityString: string): number => {\n    const citiesArray = cityString.split(\"\");\n    let totalDistance = 0;\n    let routeIsValid = true;\n    citiesArray.forEach((cityName, cityIndex) => {\n      const selectedCity = cities.filter((city) => city.name === cityName)[0];\n      if (!selectedCity) {\n        alert(`${cityName} doesn't exist!`);\n        routeIsValid = false;\n        return;\n      }\n      let nextCity = \"\";\n      if (cityIndex < citiesArray.length - 1) {\n        nextCity = citiesArray[cityIndex + 1];\n      } else {\n        return;\n      }\n      const selectedRoute = selectedCity.routes.filter(\n        (route) => route.to === nextCity\n      )[0];\n      if (!selectedRoute) {\n        alert(`Route from ${cityName} to ${nextCity} doesn't exist!`);\n        routeIsValid = false;\n        return;\n      }\n      totalDistance += selectedRoute.distance;\n    });\n    if (!routeIsValid) {\n      return 0;\n    }\n    alert(totalDistance);\n    return totalDistance;\n  };\n\n  const calculateCtoCTrips = (stops: number) => {\n    console.clear();\n    const cityC = cities.filter((city) => city.name === \"C\")[0];\n\n    const ditance = cToCStep(cityC, stops);\n    console.log(\"ditance: \", ditance);\n  };\n\n  const cToCStep = (cityToCheck: City, stops_remaining: number): number => {\n    console.group(`[${stops_remaining}]${cityToCheck.name}`);\n    let accumulatedDistance = 0;\n    cityToCheck.routes.forEach((route) => {\n      const cityRoute = cities.filter((city) => city.name === route.to)[0];\n      if (stops_remaining === 0) {\n        console.log(\"No more stops available\");\n        return 0;\n      }\n      if (cityRoute.name === \"C\") {\n        console.log(\n          `[${cityToCheck.name} -> ${cityRoute.name}] distance: ${route.distance}`\n        );\n        console.groupEnd();\n        return route.distance;\n      }\n      accumulatedDistance = cToCStep(cityRoute, stops_remaining - 1);\n      console.log(\n        `[${cityToCheck.name} -> ${route.to}]accumulatedDistance: ${accumulatedDistance}`\n      );\n    });\n    console.groupEnd();\n    return accumulatedDistance;\n  };\n\n  return (\n    <Provider\n      value={{\n        cities,\n        addMultipleRoutes,\n        addRoute,\n        calculateRouteDistance,\n        calculateCtoCTrips,\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nconst useTrains = (): TrainsContextData => {\n  const context = useContext(trainsContext);\n  if (!context)\n    throw new Error(\"useTrains must be used within <TrainsProvider>\");\n  return context;\n};\n\nexport default useTrains;\n","import React from \"react\";\nimport { TrainsProvider } from \"./context/trains.context\";\n\nconst Providers: React.FC = ({ children }) => {\n  return <TrainsProvider>{children}</TrainsProvider>;\n};\n\nexport default Providers;\n","import styled from \"styled-components\";\n\nexport const StyledButton = styled.button`\n  padding: 1em;\n  margin: 0em 2em 0em 2em;\n  background-color: #282c34;\n  border: 2px solid white;\n  color: white;\n  font-weight: bold;\n  transition: 100ms ease;\n  cursor: pointer;\n  :hover:active {\n    background-color: white;\n    color: #282c34;\n    cursor: pointer;\n  }\n  :disabled {\n    background-color: gray;\n    cursor: not-allowed;\n  }\n`;\n","import React from \"react\";\nimport * as S from \"./styles\";\ninterface ButtonProps {\n  label: string;\n  onClick?: () => void;\n  disabled?: boolean;\n}\n\nconst Button = ({ label, onClick, disabled }: ButtonProps) => {\n  return (\n    <S.StyledButton disabled={disabled} onClick={onClick}>\n      {label}\n    </S.StyledButton>\n  );\n};\n\nexport default Button;\n","import styled from \"styled-components\";\n\nexport const TextInputContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-grow: initial;\n  flex-basis: 25%;\n  flex-direction: column;\n  margin: 1em;\n`;\nexport const StyledInput = styled.input`\n  letter-spacing: 1em;\n  font-size: 1em;\n  padding: 0.5em;\n`;\nexport const InputLabel = styled.label`\n  color: white;\n  font-size: 1em;\n  padding: 0.5em;\n`;\n","import React from \"react\";\nimport * as S from \"./styles\";\ninterface TextInputProps {\n  label?: string;\n  value?: string;\n  checked?: boolean;\n  changeValue?: (s: string) => void;\n  changeChecked?: (c: boolean) => void;\n  type?: React.HTMLInputTypeAttribute;\n}\n\nconst TextInput = ({\n  label,\n  value,\n  changeValue,\n  type,\n  changeChecked,\n  checked,\n}: TextInputProps) => {\n  return (\n    <S.TextInputContainer>\n      <S.InputLabel>{label}</S.InputLabel>\n      <S.StyledInput\n        type={type}\n        value={value}\n        checked={checked}\n        onChange={(e) => {\n          if (!!changeChecked) {\n            if (type === \"checkbox\") {\n              changeChecked(e.target.checked);\n            }\n          }\n          if (!!changeValue) {\n            if (type !== \"checkbox\") {\n              changeValue(e.target.value);\n            }\n          }\n        }}\n      />\n    </S.TextInputContainer>\n  );\n};\n\nexport default TextInput;\n","import styled, { css } from \"styled-components\";\n\nconst commonCSS = css`\n  color: white;\n  margin: 0.5em;\n`;\n\nexport const StyledH1 = styled.h1`\n  ${commonCSS}\n`;\nexport const StyledH2 = styled.h2`\n  ${commonCSS}\n`;\nexport const StyledH3 = styled.h3`\n  ${commonCSS}\n`;\nexport const StyledH4 = styled.h4`\n  ${commonCSS}\n`;\nexport const StyledH5 = styled.h5`\n  ${commonCSS}\n`;\nexport const StyledH6 = styled.h6`\n  ${commonCSS}\n`;\nexport const StyledP = styled.p`\n  ${commonCSS}\n`;\n","import React from \"react\";\nimport * as S from \"./styles\";\ninterface TypographyTypes {\n  h1: any;\n  h2: any;\n  h3: any;\n  h4: any;\n  h5: any;\n  h6: any;\n  p: any;\n}\ninterface TypographyProps {\n  type?: keyof TypographyTypes;\n  text: string;\n}\n\nconst Typography: React.FC<TypographyProps> = ({ type = \"p\", text }) => {\n  const typographies: TypographyTypes = {\n    h1: <S.StyledH1>{text}</S.StyledH1>,\n    h2: <S.StyledH2>{text}</S.StyledH2>,\n    h3: <S.StyledH3>{text}</S.StyledH3>,\n    h4: <S.StyledH4>{text}</S.StyledH4>,\n    h5: <S.StyledH5>{text}</S.StyledH5>,\n    h6: <S.StyledH6>{text}</S.StyledH6>,\n    p: <S.StyledP>{text}</S.StyledP>,\n  };\n\n  return typographies[type];\n};\n\nexport default Typography;\n","import styled from \"styled-components\";\n\nexport const TextAreaContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-grow: initial;\n  flex-basis: 25%;\n  flex-direction: column;\n  margin: 1em;\n`;\nexport const StyledTextArea = styled.textarea`\n  letter-spacing: 1em;\n  font-size: 1em;\n  padding: 0.5em;\n`;\nexport const TextAreaLabel = styled.label`\n  color: white;\n  font-size: 1em;\n  padding: 0.5em;\n`;\n","import React from \"react\";\nimport * as S from \"./styles\";\ninterface TextInputProps {\n  label?: string;\n  value?: string;\n  changeValue?: (e: string) => void;\n}\n\nconst TextArea = ({ label, value, changeValue }: TextInputProps) => {\n  return (\n    <S.TextAreaContainer>\n      <S.TextAreaLabel>{label}</S.TextAreaLabel>\n      <S.StyledTextArea\n        value={value}\n        onChange={(e) => !!changeValue && changeValue(e.target.value)}\n      />\n    </S.TextAreaContainer>\n  );\n};\n\nexport default TextArea;\n","import * as GS from \"../global-styles\";\nimport React, { useState } from \"react\";\nimport Button from \"../components/button\";\nimport TextInput from \"../components/TextInput\";\nimport useTrains from \"../context/trains.context\";\nimport Typography from \"../components/typography\";\nimport TextArea from \"../components/TextArea\";\n\nconst AddCitiesSection = () => {\n  const [multipleRouteCommands, setMultipleRouteCommands] = useState(\n    \"AB5, BC4, CD8, DC8, DE6, AD5, CE2, EB3, AE7\"\n  );\n  const [routeCommand, setRouteCommand] = useState(\"\");\n  const [routeLength, setRouteLength] = useState(\"0\");\n  const { addRoute, addMultipleRoutes } = useTrains();\n  return (\n    <>\n      <GS.StyledContainer>\n        <TextArea\n          label=\"Multiple Commands (separated by ,)\"\n          changeValue={setMultipleRouteCommands}\n          value={multipleRouteCommands}\n        />\n        <Button\n          label=\"Create Multiple Routes\"\n          onClick={() => addMultipleRoutes(multipleRouteCommands)}\n        />\n        <GS.StyledFlexContainerNoBorder>\n          <Typography type=\"p\" text=\"or create a single Route\" />\n        </GS.StyledFlexContainerNoBorder>\n        <GS.StyledGridRow>\n          <GS.StyledFlexContainerNoBorder>\n            <TextInput\n              label=\"Route Command (LL)\"\n              value={routeCommand}\n              changeValue={setRouteCommand}\n            />\n          </GS.StyledFlexContainerNoBorder>\n          <GS.StyledFlexContainerNoBorder>\n            <TextInput\n              label=\"Route Length (N)\"\n              value={routeLength}\n              changeValue={setRouteLength}\n            />\n          </GS.StyledFlexContainerNoBorder>\n        </GS.StyledGridRow>\n        <Button\n          label=\"Create Single Route\"\n          onClick={() => addRoute(routeCommand, routeLength)}\n        />\n      </GS.StyledContainer>\n    </>\n  );\n};\n\nexport default AddCitiesSection;\n","import * as GS from \"../global-styles\";\nimport React, { useState } from \"react\";\nimport Button from \"../components/button\";\nimport TextInput from \"../components/TextInput\";\nimport useTrains from \"../context/trains.context\";\n\nconst CalculateDistancesSection = () => {\n  const { calculateRouteDistance, calculateCtoCTrips } = useTrains();\n  const [cityString, setCityString] = useState(\"ABC\");\n  return (\n    <GS.StyledFlexContainer>\n      <GS.StyledContainer>\n        <TextInput\n          label=\"Check distance between cities (without any dividers)\"\n          value={cityString}\n          changeValue={setCityString}\n        />\n        <Button\n          label=\"Calculate\"\n          onClick={() => calculateRouteDistance(cityString)}\n        />\n      </GS.StyledContainer>\n      <Button\n        label=\"CalculateC to C (max 3 stops) \"\n        onClick={() => calculateCtoCTrips(3)}\n      />\n    </GS.StyledFlexContainer>\n  );\n};\n\nexport default CalculateDistancesSection;\n","import React from \"react\";\nimport { Route } from \"../../context/trains.context\";\nimport * as GS from \"../../global-styles\";\nimport Typography from \"../typography\";\n\ninterface ReceiptItemProps {\n  route: Route;\n}\n\nconst RouteListItem: React.FC<ReceiptItemProps> = ({\n  route: { from, to, distance },\n}) => {\n  return (\n    <GS.StyledContainer>\n      <GS.StyledGridRow>\n        <GS.StyledFlexGridRow>\n          <Typography type=\"h6\" text=\"To\" />\n          <Typography type=\"h1\" text={to} />\n        </GS.StyledFlexGridRow>\n        <GS.StyledFlexGridRow>\n          <Typography type=\"h6\" text=\"Distance\" />\n          <Typography type=\"h1\" text={distance.toString()} />\n        </GS.StyledFlexGridRow>\n      </GS.StyledGridRow>\n      <GS.StyledFlexContainerNoBorder />\n    </GS.StyledContainer>\n  );\n};\n\nexport default RouteListItem;\n","import React from \"react\";\nimport { City } from \"../../context/trains.context\";\nimport * as GS from \"../../global-styles\";\nimport RouteListItem from \"../routeListItem\";\nimport Typography from \"../typography\";\n\ninterface ReceiptItemProps {\n  city: City;\n}\n\nconst CityListItem: React.FC<ReceiptItemProps> = ({\n  city: { name, routes },\n}) => {\n  return (\n    <GS.StyledContainer>\n      <GS.StyledFlexContainerNoBorder>\n        <GS.StyledGridRow>\n          <Typography type=\"h6\" text=\"City\" />\n          <Typography type=\"h1\" text={name} />\n        </GS.StyledGridRow>\n        <GS.StyledFlexContainerNoBorder>\n          {routes.map((route, index) => (\n            <RouteListItem key={index} route={route} />\n          ))}\n        </GS.StyledFlexContainerNoBorder>\n      </GS.StyledFlexContainerNoBorder>\n      <GS.StyledFlexContainerNoBorder />\n    </GS.StyledContainer>\n  );\n};\n\nexport default CityListItem;\n","import styled from \"styled-components\";\n\nexport const SeeCitiesContainer = styled.div`\n  /* max-height: 30vh; */\n`;\n","import React from \"react\";\nimport useTrains from \"../context/trains.context\";\nimport CityListItem from \"../components/cityListItem\";\nimport * as S from \"./styles\";\nconst SeeCitiesSection = () => {\n  const { cities } = useTrains();\n  return (\n    <>\n      <S.SeeCitiesContainer>\n        {cities.map((city, index) => (\n          <CityListItem key={index} city={city} />\n        ))}\n      </S.SeeCitiesContainer>\n    </>\n  );\n};\n\nexport default SeeCitiesSection;\n","import React from \"react\";\nimport * as GS from \"./global-styles\";\nimport Providers from \"./providers\";\nimport AddCitiesSection from \"./sections/addCities.section\";\nimport CalculateDistancesSection from \"./sections/calculateDistances.section\";\nimport SeeCitiesSection from \"./sections/seeCities.section\";\nfunction App() {\n  return (\n    <GS.App>\n      <Providers>\n        <GS.StyledContainer>\n          <AddCitiesSection />\n          <SeeCitiesSection />\n        </GS.StyledContainer>\n        <CalculateDistancesSection />\n      </Providers>\n    </GS.App>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}