{"version":3,"sources":["global-styles.ts","context/trains.context.tsx","providers.tsx","components/button/styles.ts","components/button/index.tsx","components/TextInput/styles.ts","components/TextInput/index.tsx","components/typography/styles.ts","components/typography/index.tsx","components/TextArea/styles.ts","components/TextArea/index.tsx","sections/addCities.section.tsx","sections/calculateDistances.section.tsx","components/routeListItem/index.tsx","components/cityListItem/index.tsx","sections/styles.ts","sections/seeCities.section.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","styled","div","StyledContainer","StyledFlexContainer","StyledFlexContainerNoBorder","StyledGridRow","section","StyledFlexGridRow","DEFAULT_TRAINS_CONTEXT_DATA","cities","addRoute","addMultipleRoutes","calculateCtoCTrips","calculateRouteDistance","trainsContext","createContext","Provider","TrainsProvider","children","useState","setCities","cToCStep","cityToCheck","stops_remaining","console","group","name","accumulatedDistance","routes","forEach","route","cityRoute","filter","city","to","log","distance","groupEnd","value","s","multipleRouteCommands","split","newCities","routeCommand","trimmedRouteCommand","trim","from","parseInt","length","existingCity","cityName","existingCities","checkIfCityExistsLocally","push","cityIndex","indexOf","newExistingRoutes","splice","table","routeLength","commandCities","alert","checkIfCityExists","existingRoute","cityString","citiesArray","totalDistance","routeIsValid","selectedCity","nextCity","selectedRoute","stops","clear","cityC","ditance","useTrains","context","useContext","Error","Providers","StyledButton","button","Button","label","onClick","disabled","TextInputContainer","StyledInput","input","InputLabel","TextInput","changeValue","type","changeChecked","checked","onChange","e","target","commonCSS","css","StyledH1","h1","StyledH2","h2","StyledH3","h3","StyledH4","h4","StyledH5","h5","StyledH6","h6","StyledP","p","Typography","text","TextAreaContainer","StyledTextArea","textarea","TextAreaLabel","TextArea","AddCitiesSection","setMultipleRouteCommands","setRouteCommand","setRouteLength","CalculateDistancesSection","setCityString","RouteListItem","toString","CityListItem","map","index","SeeCitiesContainer","SeeCitiesSection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.725187c8.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const App = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: calc(10px + 1vmin);\r\n  color: white;\r\n`;\r\n\r\nexport const StyledContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0.2em;\r\n  margin: 0.2em;\r\n  border: 2px solid gray;\r\n`;\r\nexport const StyledFlexContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  padding: 0.2em;\r\n  margin: 0.2em;\r\n  border: 2px solid gray;\r\n`;\r\nexport const StyledFlexContainerNoBorder = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  padding: 0.2em;\r\n  margin: 0.2em;\r\n`;\r\n\r\nexport const StyledGridRow = styled.section`\r\n  display: flex;\r\n  width: auto;\r\n  align-items: center;\r\n`;\r\nexport const StyledFlexGridRow = styled.section`\r\n  display: flex;\r\n  flex: 1;\r\n  width: auto;\r\n  align-items: center;\r\n`;\r\n","import React, { createContext, useContext, useState } from \"react\";\r\n\r\nexport interface City {\r\n  name: string;\r\n  routes: Route[];\r\n}\r\n\r\nexport interface Route {\r\n  distance: number;\r\n  from: string;\r\n  to: string;\r\n}\r\n\r\nexport interface TrainsContextData {\r\n  cities: City[];\r\n  addRoute: (s: string, l: string) => void;\r\n  addMultipleRoutes: (mr: string) => void;\r\n  calculateRouteDistance: (c: string) => number;\r\n  calculateCtoCTrips: (stops: number) => void;\r\n}\r\n\r\nconst DEFAULT_TRAINS_CONTEXT_DATA: TrainsContextData = {\r\n  cities: [],\r\n  addRoute: () => null,\r\n  addMultipleRoutes: () => null,\r\n  calculateCtoCTrips: () => null,\r\n  calculateRouteDistance: () => 0,\r\n};\r\n\r\nconst trainsContext = createContext<TrainsContextData>(\r\n  DEFAULT_TRAINS_CONTEXT_DATA\r\n);\r\n\r\nconst { Provider } = trainsContext;\r\n\r\nexport const TrainsProvider: React.FC = ({ children }) => {\r\n  const [cities, setCities] = useState<City[]>([]);\r\n\r\n  const checkIfCityExists = (cityName: string): City | null => {\r\n    const city = cities.filter((city) => city.name === cityName);\r\n    if (city.length) {\r\n      return city[0];\r\n    }\r\n    return null;\r\n  };\r\n  const checkIfCityExistsLocally = (\r\n    cityName: string,\r\n    existingCities: City[]\r\n  ): City | null => {\r\n    const city = existingCities.filter((city) => city.name === cityName);\r\n    if (city.length) {\r\n      return city[0];\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const addMultipleRoutes = (s: string) => {\r\n    const multipleRouteCommands = s.split(\",\");\r\n    const newCities = [...cities];\r\n    multipleRouteCommands.forEach((routeCommand) => {\r\n      const trimmedRouteCommand = routeCommand.trim().split(\"\");\r\n      const from = trimmedRouteCommand[0];\r\n      const to = trimmedRouteCommand[1];\r\n      const distance = parseInt(trimmedRouteCommand[2]);\r\n      console.group(routeCommand);\r\n      if (from === to || distance === 0 || trimmedRouteCommand.length > 3) {\r\n        console.log(\"Invalid Route\");\r\n        console.groupEnd();\r\n        return;\r\n      }\r\n\r\n      let existingCity = checkIfCityExistsLocally(from, newCities);\r\n      if (!existingCity) {\r\n        console.log(\r\n          from +\r\n            \" city doesnt exist, creating it and the route to:\" +\r\n            to +\r\n            \" with distance: \" +\r\n            distance\r\n        );\r\n        newCities.push({ name: from, routes: [{ from, to, distance }] });\r\n        console.groupEnd();\r\n        return;\r\n      }\r\n      console.log(from + \" City exists, continuing\");\r\n\r\n      const cityIndex = newCities.indexOf(existingCity);\r\n      console.log(from + \" cityIndex: \", cityIndex);\r\n      const existingRoute = existingCity.routes.filter((route) => {\r\n        return route.to === to;\r\n      });\r\n      if (existingRoute.length) {\r\n        console.log(\"Route already exists\");\r\n        console.groupEnd();\r\n        return;\r\n      }\r\n      console.log(from + \" Route to:\" + to + \" doesnt exist, creating\");\r\n      const newExistingRoutes = [...existingCity.routes];\r\n      newExistingRoutes.push({ from, to, distance });\r\n      console.log(from + \" newExistingRoutes: \", newExistingRoutes);\r\n      existingCity.routes = newExistingRoutes;\r\n      newCities.splice(cityIndex, 1, existingCity);\r\n      console.table(newCities);\r\n      console.groupEnd();\r\n    });\r\n    setCities(newCities);\r\n    // console.log({ currentCities, multipleRouteCommands });\r\n  };\r\n\r\n  const addRoute = (routeCommand: string, routeLength: string) => {\r\n    const commandCities = routeCommand.split(\"\");\r\n    const from = commandCities[0];\r\n    const to = commandCities[1];\r\n    const distance = parseInt(routeLength);\r\n    if (from === to || distance === 0 || commandCities.length > 2) {\r\n      alert(\"Invalid route\");\r\n      return;\r\n    }\r\n    let existingCity = checkIfCityExists(from);\r\n    if (!existingCity) {\r\n      const newCities: City[] = [...cities];\r\n      newCities.push({ name: from, routes: [{ from, to, distance }] });\r\n      setCities(newCities);\r\n      return;\r\n    }\r\n    const cityIndex = cities.indexOf(existingCity);\r\n    const existingRoute = existingCity.routes.filter((route) => {\r\n      return route.to === to;\r\n    });\r\n    console.log(\"existingRoute: \", existingRoute);\r\n    if (existingRoute.length) {\r\n      alert(\"Route already exists!\");\r\n      return;\r\n    }\r\n    const newExistingRoutes = [...existingCity.routes];\r\n    newExistingRoutes.push({ from, to, distance });\r\n    existingCity.routes = newExistingRoutes;\r\n    const newCities = [...cities];\r\n    newCities.splice(cityIndex, 1, existingCity);\r\n    setCities(newCities);\r\n  };\r\n\r\n  const calculateRouteDistance = (cityString: string): number => {\r\n    const citiesArray = cityString.split(\"\");\r\n    let totalDistance = 0;\r\n    let routeIsValid = true;\r\n    citiesArray.forEach((cityName, cityIndex) => {\r\n      const selectedCity = cities.filter((city) => city.name === cityName)[0];\r\n      if (!selectedCity) {\r\n        alert(`${cityName} doesn't exist!`);\r\n        routeIsValid = false;\r\n        return;\r\n      }\r\n      let nextCity = \"\";\r\n      if (cityIndex < citiesArray.length - 1) {\r\n        nextCity = citiesArray[cityIndex + 1];\r\n      } else {\r\n        return;\r\n      }\r\n      const selectedRoute = selectedCity.routes.filter(\r\n        (route) => route.to === nextCity\r\n      )[0];\r\n      if (!selectedRoute) {\r\n        alert(`Route from ${cityName} to ${nextCity} doesn't exist!`);\r\n        routeIsValid = false;\r\n        return;\r\n      }\r\n      totalDistance += selectedRoute.distance;\r\n    });\r\n    if (!routeIsValid) {\r\n      return 0;\r\n    }\r\n    alert(totalDistance);\r\n    return totalDistance;\r\n  };\r\n\r\n  const calculateCtoCTrips = (stops: number) => {\r\n    console.clear();\r\n    const cityC = cities.filter((city) => city.name === \"C\")[0];\r\n\r\n    const ditance = cToCStep(cityC, stops);\r\n    console.log(\"ditance: \", ditance);\r\n  };\r\n\r\n  const cToCStep = (cityToCheck: City, stops_remaining: number): number => {\r\n    console.group(`[${stops_remaining}]${cityToCheck.name}`);\r\n    let accumulatedDistance = 0;\r\n    cityToCheck.routes.forEach((route) => {\r\n      const cityRoute = cities.filter((city) => city.name === route.to)[0];\r\n      if (stops_remaining === 0) {\r\n        console.log(\"No more stops available\");\r\n        return 0;\r\n      }\r\n      if (cityRoute.name === \"C\") {\r\n        console.log(\r\n          `[${cityToCheck.name} -> ${cityRoute.name}] distance: ${route.distance}`\r\n        );\r\n        console.groupEnd();\r\n        return route.distance;\r\n      }\r\n      accumulatedDistance = cToCStep(cityRoute, stops_remaining - 1);\r\n      console.log(\r\n        `[${cityToCheck.name} -> ${route.to}]accumulatedDistance: ${accumulatedDistance}`\r\n      );\r\n    });\r\n    console.groupEnd();\r\n    return accumulatedDistance;\r\n  };\r\n\r\n  return (\r\n    <Provider\r\n      value={{\r\n        cities,\r\n        addMultipleRoutes,\r\n        addRoute,\r\n        calculateRouteDistance,\r\n        calculateCtoCTrips,\r\n      }}\r\n    >\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nconst useTrains = (): TrainsContextData => {\r\n  const context = useContext(trainsContext);\r\n  if (!context)\r\n    throw new Error(\"useTrains must be used within <TrainsProvider>\");\r\n  return context;\r\n};\r\n\r\nexport default useTrains;\r\n","import React from \"react\";\r\nimport { TrainsProvider } from \"./context/trains.context\";\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return <TrainsProvider>{children}</TrainsProvider>;\r\n};\r\n\r\nexport default Providers;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 1em;\r\n  margin: 0em 2em 0em 2em;\r\n  background-color: #282c34;\r\n  border: 2px solid white;\r\n  color: white;\r\n  font-weight: bold;\r\n  transition: 100ms ease;\r\n  cursor: pointer;\r\n  :hover:active {\r\n    background-color: white;\r\n    color: #282c34;\r\n    cursor: pointer;\r\n  }\r\n  :disabled {\r\n    background-color: gray;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface ButtonProps {\r\n  label: string;\r\n  onClick?: () => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst Button = ({ label, onClick, disabled }: ButtonProps) => {\r\n  return (\r\n    <S.StyledButton disabled={disabled} onClick={onClick}>\r\n      {label}\r\n    </S.StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nexport const TextInputContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-grow: initial;\r\n  flex-basis: 25%;\r\n  flex-direction: column;\r\n  margin: 1em;\r\n`;\r\nexport const StyledInput = styled.input`\r\n  letter-spacing: 1em;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\nexport const InputLabel = styled.label`\r\n  color: white;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface TextInputProps {\r\n  label?: string;\r\n  value?: string;\r\n  checked?: boolean;\r\n  changeValue?: (s: string) => void;\r\n  changeChecked?: (c: boolean) => void;\r\n  type?: React.HTMLInputTypeAttribute;\r\n}\r\n\r\nconst TextInput = ({\r\n  label,\r\n  value,\r\n  changeValue,\r\n  type,\r\n  changeChecked,\r\n  checked,\r\n}: TextInputProps) => {\r\n  return (\r\n    <S.TextInputContainer>\r\n      <S.InputLabel>{label}</S.InputLabel>\r\n      <S.StyledInput\r\n        type={type}\r\n        value={value}\r\n        checked={checked}\r\n        onChange={(e) => {\r\n          if (!!changeChecked) {\r\n            if (type === \"checkbox\") {\r\n              changeChecked(e.target.checked);\r\n            }\r\n          }\r\n          if (!!changeValue) {\r\n            if (type !== \"checkbox\") {\r\n              changeValue(e.target.value);\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </S.TextInputContainer>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst commonCSS = css`\r\n  color: white;\r\n  margin: 0.5em;\r\n`;\r\n\r\nexport const StyledH1 = styled.h1`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH2 = styled.h2`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH3 = styled.h3`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH4 = styled.h4`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH5 = styled.h5`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH6 = styled.h6`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledP = styled.p`\r\n  ${commonCSS}\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface TypographyTypes {\r\n  h1: any;\r\n  h2: any;\r\n  h3: any;\r\n  h4: any;\r\n  h5: any;\r\n  h6: any;\r\n  p: any;\r\n}\r\ninterface TypographyProps {\r\n  type?: keyof TypographyTypes;\r\n  text: string;\r\n}\r\n\r\nconst Typography: React.FC<TypographyProps> = ({ type = \"p\", text }) => {\r\n  const typographies: TypographyTypes = {\r\n    h1: <S.StyledH1>{text}</S.StyledH1>,\r\n    h2: <S.StyledH2>{text}</S.StyledH2>,\r\n    h3: <S.StyledH3>{text}</S.StyledH3>,\r\n    h4: <S.StyledH4>{text}</S.StyledH4>,\r\n    h5: <S.StyledH5>{text}</S.StyledH5>,\r\n    h6: <S.StyledH6>{text}</S.StyledH6>,\r\n    p: <S.StyledP>{text}</S.StyledP>,\r\n  };\r\n\r\n  return typographies[type];\r\n};\r\n\r\nexport default Typography;\r\n","import styled from \"styled-components\";\r\n\r\nexport const TextAreaContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-grow: initial;\r\n  flex-basis: 25%;\r\n  flex-direction: column;\r\n  margin: 1em;\r\n`;\r\nexport const StyledTextArea = styled.textarea`\r\n  letter-spacing: 1em;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\nexport const TextAreaLabel = styled.label`\r\n  color: white;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface TextInputProps {\r\n  label?: string;\r\n  value?: string;\r\n  changeValue?: (e: string) => void;\r\n}\r\n\r\nconst TextArea = ({ label, value, changeValue }: TextInputProps) => {\r\n  return (\r\n    <S.TextAreaContainer>\r\n      <S.TextAreaLabel>{label}</S.TextAreaLabel>\r\n      <S.StyledTextArea\r\n        value={value}\r\n        onChange={(e) => !!changeValue && changeValue(e.target.value)}\r\n      />\r\n    </S.TextAreaContainer>\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n","import * as GS from \"../global-styles\";\r\nimport React, { useState } from \"react\";\r\nimport Button from \"../components/button\";\r\nimport TextInput from \"../components/TextInput\";\r\nimport useTrains from \"../context/trains.context\";\r\nimport Typography from \"../components/typography\";\r\nimport TextArea from \"../components/TextArea\";\r\n\r\nconst AddCitiesSection = () => {\r\n  const [multipleRouteCommands, setMultipleRouteCommands] = useState(\r\n    \"AB5, BC4, CD8, DC8, DE6, AD5, CE2, EB3, AE7\"\r\n  );\r\n  const [routeCommand, setRouteCommand] = useState(\"\");\r\n  const [routeLength, setRouteLength] = useState(\"0\");\r\n  const { addRoute, addMultipleRoutes } = useTrains();\r\n  return (\r\n    <>\r\n      <GS.StyledContainer>\r\n        <TextArea\r\n          label=\"Multiple Commands (separated by ,)\"\r\n          changeValue={setMultipleRouteCommands}\r\n          value={multipleRouteCommands}\r\n        />\r\n        <Button\r\n          label=\"Create Multiple Routes\"\r\n          onClick={() => addMultipleRoutes(multipleRouteCommands)}\r\n        />\r\n        <GS.StyledFlexContainerNoBorder>\r\n          <Typography type=\"p\" text=\"or create a single Route\" />\r\n        </GS.StyledFlexContainerNoBorder>\r\n        <GS.StyledGridRow>\r\n          <GS.StyledFlexContainerNoBorder>\r\n            <TextInput\r\n              label=\"Route Command (LL)\"\r\n              value={routeCommand}\r\n              changeValue={setRouteCommand}\r\n            />\r\n          </GS.StyledFlexContainerNoBorder>\r\n          <GS.StyledFlexContainerNoBorder>\r\n            <TextInput\r\n              label=\"Route Length (N)\"\r\n              value={routeLength}\r\n              changeValue={setRouteLength}\r\n            />\r\n          </GS.StyledFlexContainerNoBorder>\r\n        </GS.StyledGridRow>\r\n        <Button\r\n          label=\"Create Single Route\"\r\n          onClick={() => addRoute(routeCommand, routeLength)}\r\n        />\r\n      </GS.StyledContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCitiesSection;\r\n","import * as GS from \"../global-styles\";\r\nimport React, { useState } from \"react\";\r\nimport Button from \"../components/button\";\r\nimport TextInput from \"../components/TextInput\";\r\nimport useTrains from \"../context/trains.context\";\r\n\r\nconst CalculateDistancesSection = () => {\r\n  const { calculateRouteDistance, calculateCtoCTrips } = useTrains();\r\n  const [cityString, setCityString] = useState(\"ABC\");\r\n  return (\r\n    <GS.StyledFlexContainer>\r\n      <GS.StyledContainer>\r\n        <TextInput\r\n          label=\"Check distance between cities (without any dividers)\"\r\n          value={cityString}\r\n          changeValue={setCityString}\r\n        />\r\n        <Button\r\n          label=\"Calculate\"\r\n          onClick={() => calculateRouteDistance(cityString)}\r\n        />\r\n      </GS.StyledContainer>\r\n      <Button\r\n        label=\"CalculateC to C (max 3 stops) \"\r\n        onClick={() => calculateCtoCTrips(3)}\r\n      />\r\n    </GS.StyledFlexContainer>\r\n  );\r\n};\r\n\r\nexport default CalculateDistancesSection;\r\n","import React from \"react\";\r\nimport { Route } from \"../../context/trains.context\";\r\nimport * as GS from \"../../global-styles\";\r\nimport Typography from \"../typography\";\r\n\r\ninterface ReceiptItemProps {\r\n  route: Route;\r\n}\r\n\r\nconst RouteListItem: React.FC<ReceiptItemProps> = ({\r\n  route: { from, to, distance },\r\n}) => {\r\n  return (\r\n    <GS.StyledContainer>\r\n      <GS.StyledGridRow>\r\n        <GS.StyledFlexGridRow>\r\n          <Typography type=\"h6\" text=\"To\" />\r\n          <Typography type=\"h1\" text={to} />\r\n        </GS.StyledFlexGridRow>\r\n        <GS.StyledFlexGridRow>\r\n          <Typography type=\"h6\" text=\"Distance\" />\r\n          <Typography type=\"h1\" text={distance.toString()} />\r\n        </GS.StyledFlexGridRow>\r\n      </GS.StyledGridRow>\r\n      <GS.StyledFlexContainerNoBorder />\r\n    </GS.StyledContainer>\r\n  );\r\n};\r\n\r\nexport default RouteListItem;\r\n","import React from \"react\";\r\nimport { City } from \"../../context/trains.context\";\r\nimport * as GS from \"../../global-styles\";\r\nimport RouteListItem from \"../routeListItem\";\r\nimport Typography from \"../typography\";\r\n\r\ninterface ReceiptItemProps {\r\n  city: City;\r\n}\r\n\r\nconst CityListItem: React.FC<ReceiptItemProps> = ({\r\n  city: { name, routes },\r\n}) => {\r\n  return (\r\n    <GS.StyledContainer>\r\n      <GS.StyledFlexContainerNoBorder>\r\n        <GS.StyledGridRow>\r\n          <Typography type=\"h6\" text=\"City\" />\r\n          <Typography type=\"h1\" text={name} />\r\n        </GS.StyledGridRow>\r\n        <GS.StyledFlexContainerNoBorder>\r\n          {routes.map((route, index) => (\r\n            <RouteListItem key={index} route={route} />\r\n          ))}\r\n        </GS.StyledFlexContainerNoBorder>\r\n      </GS.StyledFlexContainerNoBorder>\r\n      <GS.StyledFlexContainerNoBorder />\r\n    </GS.StyledContainer>\r\n  );\r\n};\r\n\r\nexport default CityListItem;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SeeCitiesContainer = styled.div`\r\n  /* max-height: 30vh; */\r\n`;\r\n","import React from \"react\";\r\nimport useTrains from \"../context/trains.context\";\r\nimport CityListItem from \"../components/cityListItem\";\r\nimport * as S from \"./styles\";\r\nconst SeeCitiesSection = () => {\r\n  const { cities } = useTrains();\r\n  return (\r\n    <>\r\n      <S.SeeCitiesContainer>\r\n        {cities.map((city, index) => (\r\n          <CityListItem key={index} city={city} />\r\n        ))}\r\n      </S.SeeCitiesContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SeeCitiesSection;\r\n","import React from \"react\";\nimport * as GS from \"./global-styles\";\nimport Providers from \"./providers\";\nimport AddCitiesSection from \"./sections/addCities.section\";\nimport CalculateDistancesSection from \"./sections/calculateDistances.section\";\nimport SeeCitiesSection from \"./sections/seeCities.section\";\nfunction App() {\n  return (\n    <GS.App>\n      <Providers>\n        <GS.StyledContainer>\n          <AddCitiesSection />\n          <SeeCitiesSection />\n        </GS.StyledContainer>\n        <CalculateDistancesSection />\n      </Providers>\n    </GS.App>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}